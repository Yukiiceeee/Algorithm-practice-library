/*
 * 证明：
 * 贪心算法有两种证明方法：反证法和归纳法。一般情况下，一道题只会用到其中的一种方法来证明。
 * 反证法：如果交换方案中任意两个元素/相邻的两个元素后，答案不会变得更好，那么可以推定目前的解已经是最优解了。
 * 归纳法：先算得出边界情况（例如 n = 1）的最优解 F_1，然后再证明：对于每个 n，F_{n+1} 都可以由 F_{n} 推导出结果。
 *
 * 常见题型：
 * 「我们将 XXX 按照某某顺序排序，然后按某种顺序（例如从小到大）选择。」。
 * 「我们每次都取 XXX 中最大/小的东西，并更新 XXX。」（有时「XXX 中最大/小的东西」可以优化，比如用优先队列维护）
 * 二者的区别在于一种是离线的，先处理后选择；一种是在线的，边处理边选择。
 *
 * 解法：
 * 排序法：常见的情况是输入一个包含几个（一般一到两个）权值的数组，通过排序然后遍历模拟计算的方法求出最优值。
 * 后悔法：思路是无论当前的选项是否最优都接受，然后进行比较，如果选择之后不是最优了，则反悔，舍弃掉这个选项；否则，正式接受。如此往复。
 *
 * 贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。
 * 动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。
 */